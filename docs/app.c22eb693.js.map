{"version":3,"sources":["networkControl/networkControl.js","app.js"],"names":["NetworkControl","constructor","options","console","log","networkTraceOptions","opts","originPoints","originNetwork","linearNetwork","originLayer","color","type","features","slice","blankGeoJSON","networkTraceDirection","loadingTimeout","loadingStart","setTimeout","document","getElementById","classList","add","onAdd","m","_map","networkMap","worker","Worker","networkControlClickHandler","e","moveLayer","queryRenderedFeatures","point","layers","length","id","name","postMessage","addEventListener","data","getSource","setData","remove","clearTimeout","addSource","addLayer","source","paint","on","_btn","createElement","title","style","lineHeight","innerHTML","padding","width","onclick","debug","warn","contains","backgroundColor","innerText","off","_container","className","appendChild","onRemove","parentNode","removeChild","undefined","lines","points","networkLines","selected","map","mapboxgl","Map","container","hash","center","zoom","fetchURLs","Promise","all","fetch","then","response","json","error","buildMap","f","i","properties","index","class","push","setFilter","stops","addControl","querySelector","click","highlightIdPoints","size","getCanvas","cursor","setFeatureState","highlight"],"mappings":"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","file":"app.c22eb693.js","sourceRoot":"..\\src","sourcesContent":["/**\r\n * TODO add more console notifications\r\n * TODO add to blog post\r\n * TODO add requires that the geojson have an id at the feature.id level\r\n */\r\n\r\nclass NetworkControl {\r\n  constructor(options) {\r\n\r\n    console.log({networkTraceOptions: options.options})\r\n\r\n    const opts = options.options;\r\n\r\n    const originPoints = (!options) ? {} : options.options.originPoints;\r\n    const originNetwork = (!options) ? {} : options.options.linearNetwork;\r\n    const originLayer = (!options) ? \"\" : options.options.originLayer;\r\n    const color = (!options) ? \"yellow\" : options.options.color;    \r\n\r\n    var linearNetwork = {\r\n      type: \"FeatureCollection\",\r\n      features: []\r\n    };\r\n    linearNetwork.features = (originNetwork.features).slice(0)\r\n    linearNetwork[\"name\"] = \"network\";\r\n\r\n    const blankGeoJSON = {\r\n      type: \"FeatureCollection\",\r\n      features: []\r\n    }\r\n\r\n    let networkTraceDirection = \"upstream\";\r\n\r\n    var loadingTimeout;\r\n\r\n    var loadingStart = function() {\r\n      loadingTimeout = setTimeout(function() {\r\n        document.getElementById(\"loading\").classList.add(\"loading\");\r\n      }, 300)\r\n    }\r\n\r\n    var loadingStop = function() {\r\n      document.getElementById(\"loading\").classList.remove(\"loading\");\r\n      clearTimeout(loadingTimeout)\r\n    }\r\n\r\n    this.onAdd = function (m) {\r\n      this._map = m;\r\n      var networkMap = m;\r\n\r\n      const worker = new Worker('./networkControlWorker.js');\r\n\r\n      worker.addEventListener('message', function(e) {\r\n  \r\n        if (e.data.name && e.data.name === \"networkTree\") {\r\n          console.log({data: e.data});\r\n          \r\n          networkMap.getSource(\"worker\").setData(e.data);\r\n\r\n          loadingStop();\r\n\r\n        }\r\n      }, false);\r\n  \r\n      worker.postMessage(linearNetwork);\r\n\r\n      originPoints.name = \"pointNetwork\";\r\n      worker.postMessage(originPoints);\r\n\r\n      networkMap.addSource(\"worker\", {\r\n        type: \"geojson\",\r\n        data: blankGeoJSON\r\n      });\r\n\r\n      networkMap.addLayer({\r\n        id: \"workerHalo\",\r\n        type: \"line\",\r\n        source: \"worker\",\r\n        paint: {\r\n          \"line-color\": color,\r\n          \"line-width\": 8,\r\n          \"line-opacity\": 0.6\r\n        }\r\n      });\r\n\r\n       networkMap.addLayer({\r\n        id: \"worker\",\r\n        type: \"line\",\r\n        source: \"worker\",\r\n        paint: {\r\n          \"line-color\": color,\r\n          \"line-width\": 4,\r\n          \"line-opacity\": 1\r\n        }\r\n      });\r\n\r\n      networkMap.on('click', function (e) {\r\n        this.getSource(\"worker\").setData(blankGeoJSON);\r\n        // console.log(networkMap.queryRenderedFeatures(e.point))\r\n      });\r\n\r\n      function networkControlClickHandler(e) {\r\n\r\n        networkMap.moveLayer(\"workerHalo\")\r\n        networkMap.moveLayer(\"worker\")\r\n\r\n        var features = networkMap.queryRenderedFeatures(e.point, {layers: [originLayer]});\r\n\r\n        if (features && features.length > 0) {\r\n          loadingStart();\r\n          var point = originPoints.features[features[0].id];\r\n          point.name = networkTraceDirection;\r\n          worker.postMessage(point)\r\n\r\n          return\r\n\r\n        }\r\n      }\r\n\r\n      this._btn = document.createElement('button');\r\n      this._btn.type = 'button';\r\n      this._btn['aria-label'] = 'Location Control';\r\n      this._btn.title = \"Trace Network\";\r\n      this._btn.id = \"networkControlBtn\";\r\n      this._btn.style.lineHeight = \"0px\"\r\n      this._btn.innerHTML = \"<img src='https://icongr.am/material/vector-polyline.svg' with='80%' height='80%'> Click to start Tracing\";\r\n      this._btn.style.padding = \"15px\"\r\n      this._btn.style.width = \"auto\"\r\n      this._btn.onclick = function () {\r\n        if (opts.debug && opts.debug === true) {\r\n          console.warn('debugging is on')\r\n        }\r\n\r\n        networkMap.getSource(\"worker\").setData(blankGeoJSON);\r\n\r\n        var btn = this;\r\n\r\n        networkTraceDirection = \"upstream\";\r\n\r\n        console.log(\"tracing:\", networkTraceDirection)\r\n\r\n        if (!this.classList.contains(\"upstream\") && !this.classList.contains(\"downstream\")) {\r\n          this.classList.add(\"upstream\");\r\n          this.style.backgroundColor = \"skyblue\";\r\n          // this.children[0].src = \"https://icongr.am/material/trending-up.svg\";\r\n          this.innerText = \"Click a point to trace upstream\"\r\n          networkMap.on('click', networkControlClickHandler);\r\n          return\r\n        }\r\n\r\n        if (this.classList.contains(\"upstream\") && !this.classList.contains(\"laterals\")) {\r\n          this.classList.add(\"laterals\");\r\n          networkTraceDirection = \"upstream-laterals\";\r\n          this.style.backgroundColor = \"red\";\r\n          this.style.color = \"white\";\r\n          this.innerText = \"Click a point to trace upstream with laterals\"\r\n          networkMap.on('click', networkControlClickHandler)\r\n          return\r\n        }\r\n\r\n        if (this.classList.contains(\"upstream\") && this.classList.contains(\"laterals\")) {\r\n          this.classList.remove(\"upstream\");\r\n          this.classList.remove(\"laterals\");\r\n          this.classList.add(\"downstream\");\r\n          networkTraceDirection = \"downstream\";\r\n          this.style.backgroundColor = \"orange\";\r\n          this.style.color = \"initial\";\r\n          // btn.children[0].src = \"https://icongr.am/material/trending-down.svg\";\r\n          this.innerText = \"Click a point to trace downstream\"\r\n          networkMap.on('click', networkControlClickHandler)\r\n          return\r\n        }\r\n\r\n        if (this.classList.contains(\"downstream\")) {\r\n          this.classList.remove(\"downstream\");\r\n          this.style.backgroundColor = \"white\";\r\n          // this.children[0].src = \"https://icongr.am/material/vector-polyline.svg\";\r\n          this.innerText = \"Click to start tracing\"\r\n          networkMap.off('click', networkControlClickHandler)\r\n          return\r\n        }\r\n\r\n      };\r\n      this._container = document.createElement('div');\r\n      this._container.style.width = \"auto\";\r\n      this._container.id = \"networkControl\";\r\n      this._container.className = 'mapboxgl-ctrl mapboxgl-ctrl-group';\r\n      this._container.appendChild(this._btn);\r\n      return this._container;\r\n    }\r\n    this.onRemove = function () {\r\n      this._container.parentNode.removeChild(this._container);\r\n      this._map = undefined;\r\n      networkMap = undefined;\r\n    };\r\n  }\r\n}\r\n\r\nexport default NetworkControl","import NetworkControl from \"./networkControl/networkControl.js\"\r\n\r\nvar lines, points, networkLines, selected;\r\n\r\nselected = false;\r\n\r\nvar map = new mapboxgl.Map({\r\n  container: 'map',\r\n  hash: true,\r\n  style: {\r\n    \"version\": 8,\r\n    \"name\": \"blank\",\r\n    \"sources\": {\r\n      \"none\": {\r\n        \"type\": \"vector\",\r\n        \"url\": \"\"\r\n      }\r\n    },\r\n    \"layers\": [{\r\n      \"id\": \"background\",\r\n      \"type\": \"background\",\r\n      \"paint\": {\r\n        \"background-color\": \"whitesmoke\"\r\n      }\r\n    }]\r\n  },\r\n  center: [-82.00991,39.94092],\r\n  zoom: 14,\r\n  debug: 1\r\n});\r\n\r\nmap.on('load', function () {\r\n  fetchURLs()\r\n  .then(data => { \r\n    buildMap(data)\r\n  })\r\n});\r\n\r\n//https://gist.github.com/bschwartz757/5d1ff425767fdc6baedb4e5d5a5135c8\r\nasync function fetchURLs() {\r\n  try {\r\n    var data = await Promise.all([\r\n      /* Alternatively store each in an array */\r\n      // var [x, y, z] = await Promise.all([\r\n      // parse results as json; fetch data response has several reader methods available:\r\n      //.arrayBuffer()\r\n      //.blob()\r\n      //.formData()\r\n      //.json()\r\n      //.text()\r\n      fetch('data/lines.geojson').then((response) => response.json()),\r\n      fetch('data/points.geojson').then((response) => response.json())\r\n    ]);\r\n\r\n    return data\r\n\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nfunction buildMap(data) {\r\n  // console.log(data);\r\n\r\n  data[0].features.map(function (f, i) {\r\n    f.properties.color = \"#202020\";\r\n    f.properties.index = i;\r\n    f.id = i;\r\n  })\r\n\r\n  lines = {\r\n    type: \"FeatureCollection\",\r\n    features: []\r\n  }\r\n\r\n  data[0].features.map(function(f) {\r\n    if (f.properties.class != \"Private\") {\r\n      lines.features.push(f)\r\n    }\r\n  })\r\n\r\n  networkLines = {\r\n    type: \"FeatureCollection\",\r\n    features: lines.features.slice(0)\r\n  }\r\n\r\n  addLayer(map, 'geojsonLines', 'line', lines, \"color\", 4);\r\n\r\n  map.setFilter(\"geojsonLines\", [\"!=\", [\"get\", \"subclass\"], \"Lateral\"])\r\n\r\n  console.log('line data loaded')\r\n\r\n  data[1].features.map(function (f, i) {\r\n    f.properties.index = i;\r\n    f.id = i;\r\n  });\r\n\r\n  points = {\r\n    type: \"FeatureCollection\",\r\n    features: data[1].features.slice()\r\n  }\r\n\r\n  // console.log(points)\r\n  \r\n  addLayer(map, 'points', 'circle', points, '#202020', {stops: [[12,3], [22,8]]});\r\n  map.setFilter(\"points\", [\"!=\", [\"get\", \"class\"], \"Tap\"])\r\n\r\n  console.log('point data loaded')\r\n\r\n  map.addControl(new NetworkControl({\r\n    options: {\r\n      originPoints: points,\r\n      linearNetwork: networkLines,\r\n      originLayer: \"points\",\r\n      color: \"cyan\",\r\n      debug: true\r\n    }\r\n  }), 'top-right');\r\n  document.querySelector(\"#networkControlBtn\").click()\r\n}\r\n\r\nvar highlightIdPoints = null;\r\n\r\nmap.on('mouseenter', 'points', function (e) {\r\n  if (e.features.length > 0) {\r\n    if (highlightIdPoints) {\r\n      map.setFeatureState({source: 'points', id: highlightIdPoints}, { highlight: false});\r\n    }\r\n    highlightIdPoints = e.features[0].id;\r\n      map.setFeatureState({source: 'points', id: highlightIdPoints}, { highlight: true});\r\n      selected = true;\r\n    }\r\n});\r\n\r\n// map.on('mouseenter', 'geojsonLines', function (e) {\r\n//   if (e.features.length > 0) {\r\n//     if (highlightId) {\r\n//       map.setFeatureState({source: 'geojsonLines', id: highlightId}, { highlight: false});\r\n//     }\r\n//     highlightId = e.features[0].id;\r\n//     map.setFeatureState({source: 'geojsonLines', id: highlightId}, { highlight: true});\r\n//   }\r\n// });\r\n\r\nmap.on('mouseleave', 'points', function () {\r\n  if (highlightIdPoints) {\r\n    map.setFeatureState({source: 'points', id: highlightIdPoints}, { highlight: false});\r\n    highlightIdPoints = null;\r\n  }\r\n});\r\n\r\n// map.on('mouseleave', 'geojsonLines', function () {\r\n//   if (highlightId) {\r\n//     map.setFeatureState({source: 'geojsonLines', id: highlightId}, { highlight: false});\r\n//   }\r\n//   highlightId = null;\r\n// });\r\n\r\nfunction addLayer(m, name, type, data, color, size) {\r\n  var paint;\r\n  if (!size && type === 'fill') {\r\n    paint = {\r\n      'fill-color': color,\r\n      'fill-opacity': 0.5,\r\n      'fill-outline-color': 'transparent'\r\n    }\r\n  }else{\r\n    paint = (type === 'line') ?\r\n    {\r\n      \"line-color\": [\"case\", [\"boolean\", [\"feature-state\", \"highlight\"], false], \"#00ffff\", [\"get\", \"color\"]],\r\n      \"line-width\": size\r\n    } : {\r\n      \"circle-color\": [\"case\", [\"boolean\", [\"feature-state\", \"highlight\"], false], \"#00ffff\", color],\r\n      \"circle-radius\": size,\r\n      \"circle-stroke-width\": 3,\r\n      \"circle-stroke-opacity\": 0.9,\r\n      \"circle-stroke-color\": \"white\"\r\n    }\r\n  }\r\n  m.addLayer({\r\n    id: name,\r\n    type: type,\r\n    source: {\r\n      type: \"geojson\",\r\n      data: data\r\n    },\r\n    paint: paint\r\n  });\r\n\r\n  m.on('mouseenter', name, function () {\r\n    map.getCanvas().style.cursor = 'pointer';\r\n  });\r\n  m.on('mouseleave', name, function () {\r\n    map.getCanvas().style.cursor = '';\r\n  });\r\n}\r\n\r\n// map.on(\"click\", function(e) {\r\n//   var features = map.queryRenderedFeatures(e.point);\r\n//   var origin = features;\r\n//   console.log(origin)\r\n// })"]}